import React, { useState, useEffect, useRef } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { Heart, Share2, ChevronLeft, ChevronRight, ShoppingCart, Check, ArrowLeft, ArrowRight } from 'lucide-react';
import { fetchTShirtDetail, fetchTShirtOptions, TShirtOption, TShirtDetail } from '../lib/supabase';
import { useShop } from '../context/ShopContext';

// Gallery Slideshow Component
interface GallerySlideshowProps {
  images: string[];
  productName: string;
}

const GallerySlideshow: React.FC<GallerySlideshowProps> = ({ images, productName }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  
  const nextImage = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
  };
  
  const prevImage = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);
  };
  
  if (!images || images.length === 0) return null;
  
  return (
    <div className="relative w-full max-w-5xl mx-auto">
      {/* Current Image Container */}
      <div className="relative w-full aspect-[16/9] overflow-hidden">
        <img 
          src={images[currentIndex]} 
          alt={`${productName} gallery ${currentIndex + 1}`}
          className="w-full h-full object-contain"
        />
        
        {/* Navigation buttons */}
        <button 
          className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white p-3 rounded-full shadow-lg transition-all z-10"
          onClick={prevImage}
          aria-label="Previous image"
        >
          <ArrowLeft size={24} />
        </button>
        <button 
          className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white p-3 rounded-full shadow-lg transition-all z-10"
          onClick={nextImage}
          aria-label="Next image"
        >
          <ArrowRight size={24} />
        </button>
      </div>
      
      {/* Image counter */}
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/70 text-white px-3 py-1 rounded-full text-sm">
        {currentIndex + 1} / {images.length}
      </div>
    </div>
  );
};

const TShirtDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [tshirt, setTshirt] = useState<TShirtDetail | null>(null);
  const [tshirtOption, setTshirtOption] = useState<TShirtOption | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [selectedSize, setSelectedSize] = useState<string>('');
  const [selectedColor, setSelectedColor] = useState<string>('');
  const [selectedStyle, setSelectedStyle] = useState<string>('');
  const [selectedAge, setSelectedAge] = useState<string>('');
  const autoScrollIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const [inWishlist, setInWishlist] = useState(false);
  const { addToCart, addToWishlist, isInWishlist } = useShop();
  const navigate = useNavigate();
  
  useEffect(() => {
    const loadTShirtDetail = async () => {
      if (!id) return;
      
      setLoading(true);
      try {
        const detail = await fetchTShirtDetail(id);
        if (detail) {
          setTshirt(detail);
          // No default selections - user must choose explicitly
          setSelectedSize('');
          setSelectedColor('');
          setSelectedStyle('');
          setSelectedAge('');
          
          // Check if item is already in wishlist
          setInWishlist(isInWishlist(detail.id));
        }
        
        // Fetch the option details separately
        const options = await fetchTShirtOptions();
        const option = options.find((opt: TShirtOption) => opt.id === id);
        setTshirtOption(option || null);
      } catch (error) {
        console.error('Error loading t-shirt details:', error);
      } finally {
        setLoading(false);
      }
    };
    
    loadTShirtDetail();
    
    // Cleanup function
    return () => {
      if (autoScrollIntervalRef.current) {
        clearInterval(autoScrollIntervalRef.current);
      }
    };
  }, [id, isInWishlist]);
  
  const handleAddToCart = (redirectToCart: boolean = false) => {
    if (!tshirt) return;
    
    // Validate all required options are selected
    if (!selectedSize || !selectedColor || !selectedStyle || !selectedAge) {
      alert('Please select all required options before adding to cart');
      return;
    }
    
    // Create a unique name that includes the selected options
    const productName = `${tshirt.option_name} - ${selectedSize}, ${selectedColor}, ${selectedStyle}, ${selectedAge}`;
    
    // Convert TShirt to Product format for cart
    const productForCart = {
      id: `${tshirt.id}-${Date.now()}`,
      name: productName,
      price: tshirt.price,
      images: tshirtOption?.image_urls || [],
      description: tshirtOption?.option_description || '',
      category: 'T-shirts',
      stock_status: 'in_stock',
      // Add selected options as custom properties
      selectedSize,
      selectedColor,
      selectedStyle,
      selectedAge,
      // Add original product ID for reference
      originalId: tshirt.id,
      // Add a unique identifier for this specific combination
      variantId: `${tshirt.id}-${selectedSize}-${selectedColor}-${selectedStyle}-${selectedAge}`.toLowerCase().replace(/\s+/g, '-')
    };
    
    // Add to cart
    addToCart(productForCart as any, quantity);
    
    if (redirectToCart) {
      navigate('/cart');
    } else {
      // Show success feedback
      setIsAddedToCart(true);
      
      // Reset after 2 seconds
      setTimeout(() => {
        setIsAddedToCart(false);
      }, 1000);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  if (!tshirt) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Product not found</h2>
        <Link to="/shop" className="text-primary-600 hover:underline">
          Back to Shop
        </Link>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Back to Shop Link */}
        <div className="mb-6">
          <Link to="/shop" className="flex items-center text-gray-600 hover:text-primary-600">
            <ChevronLeft size={20} className="mr-1" />
            Back to Shop
          </Link>
        </div>
        
        {/* Product Details */}
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          <div className="md:flex">
            {/* Left Column - Images */}
            <div className="md:w-1/2 p-4">
              <div className="relative h-96 bg-gray-100 rounded-lg overflow-hidden mb-4">
                {tshirtOption?.image_urls?.[0] ? (
                  <img 
                    src={tshirtOption.image_urls[0]} 
                    alt={tshirt.option_name}
                    className="w-full h-full object-contain"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-gray-400">
                    No image available
                  </div>
                )}
              </div>
              
              {/* Thumbnails */}
              {tshirtOption?.image_urls && tshirtOption.image_urls.length > 1 && (
                <div className="flex space-x-2 overflow-x-auto py-2">
                  {tshirtOption.image_urls.map((img, idx) => (
                    <button
                      key={idx}
                      onClick={() => setCurrentImageIndex(idx)}
                      className={`flex-shrink-0 w-16 h-16 border-2 rounded ${
                        currentImageIndex === idx ? 'border-primary-500' : 'border-transparent'
                      }`}
                    >
                      <img 
                        src={img} 
                        alt={`${tshirt.option_name} ${idx + 1}`}
                        className="w-full h-full object-cover"
                      />
                    </button>
                  ))}
                </div>
              )}
            </div>
            
            {/* Right Column - Product Info */}
            <div className="md:w-1/2 p-6">
              {/* Title and Price */}
              <div className="border-b border-gray-200 pb-4 mb-4">
                <h1 className="text-2xl font-bold text-gray-900 mb-2">{tshirt.option_name}</h1>
                <div className="text-2xl font-semibold text-primary-600">
                  {new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                  }).format(tshirt.price)}
                </div>
              </div>
              
              {/* Description */}
              {tshirtOption?.option_description && (
                <div className="mb-6">
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Description</h3>
                  <p className="text-gray-600 text-sm">{tshirtOption.option_description}</p>
                </div>
              )}
              
              {/* Size Selection */}
              <div className="mb-4">
                <h3 className="text-sm font-medium text-gray-900 mb-2">Size</h3>
                <div className="flex flex-wrap gap-2">
                  {tshirt.sizes?.map((size) => (
                    <button
                      key={size}
                      type="button"
                      onClick={() => setSelectedSize(size)}
                      className={`px-4 py-2 border rounded-md text-sm font-medium ${
                        selectedSize === size
                          ? 'bg-primary-600 text-white border-transparent'
                          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {size}
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Color Selection */}
              <div className="mb-4">
                <h3 className="text-sm font-medium text-gray-900 mb-2">Color</h3>
                <div className="flex flex-wrap gap-2">
                  {tshirt.colors?.map((color) => (
                    <button
                      key={color}
                      type="button"
                      onClick={() => setSelectedColor(color)}
                      className={`px-4 py-2 border rounded-md text-sm font-medium ${
                        selectedColor === color
                          ? 'bg-primary-600 text-white border-transparent'
                          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {color}
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Style Selection */}
              <div className="mb-4">
                <h3 className="text-sm font-medium text-gray-900 mb-2">Style</h3>
                <div className="flex flex-wrap gap-2">
                  {tshirt.styles?.map((style) => (
                    <button
                      key={style}
                      type="button"
                      onClick={() => setSelectedStyle(style)}
                      className={`px-4 py-2 border rounded-md text-sm font-medium ${
                        selectedStyle === style
                          ? 'bg-primary-600 text-white border-transparent'
                          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {style}
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Age Selection */}
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-900 mb-2">Age</h3>
                <div className="flex flex-wrap gap-2">
                  {tshirt.ages?.map((age) => (
                    <button
                      key={age}
                      type="button"
                      onClick={() => setSelectedAge(age)}
                      className={`px-4 py-2 border rounded-md text-sm font-medium ${
                        selectedAge === age
                          ? 'bg-primary-600 text-white border-transparent'
                          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {age}
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Quantity */}
              <div className="mb-6">
                <label htmlFor="quantity" className="block text-sm font-medium text-gray-700 mb-2">
                  Quantity
                </label>
                <div className="flex items-center">
                  <button
                    type="button"
                    onClick={() => setQuantity((prev) => Math.max(1, prev - 1))}
                    className="px-3 py-1 border border-gray-300 rounded-l-md bg-gray-50 text-gray-600 hover:bg-gray-100"
                  >
                    -
                  </button>
                  <input
                    type="number"
                    id="quantity"
                    min="1"
                    value={quantity}
                    onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                    className="w-16 text-center border-t border-b border-gray-300 py-1 text-gray-900"
                  />
                  <button
                    type="button"
                    onClick={() => setQuantity((prev) => prev + 1)}
                    className="px-3 py-1 border border-gray-300 rounded-r-md bg-gray-50 text-gray-600 hover:bg-gray-100"
                  >
                    +
                  </button>
                </div>
              </div>
              
              {/* Buttons */}
              <div className="flex flex-col sm:flex-row gap-4">
                <button
                  type="button"
                  onClick={() => handleAddToCart()}
                  disabled={isAddedToCart || !selectedSize || !selectedColor || !selectedStyle || !selectedAge}
                  className={`flex-1 flex items-center justify-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white ${
                    isAddedToCart
                      ? 'bg-green-600 hover:bg-green-700'
                      : 'bg-primary-600 hover:bg-primary-700'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50`}
                >
                  {isAddedToCart ? (
                    <>
                      <Check className="w-5 h-5 mr-2" />
                      Added to Cart
                    </>
                  ) : (
                    <>
                      <ShoppingCart className="w-5 h-5 mr-2" />
                      Add to Cart
                    </>
                  )}
                </button>
                
                <button
                  type="button"
                  onClick={() => handleAddToCart(true)}
                  disabled={!selectedSize || !selectedColor || !selectedStyle || !selectedAge}
                  className="flex-1 px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:opacity-50"
                >
                  Buy Now
                </button>
              </div>
              
              {/* Wishlist Button */}
              <div className="mt-4">
                <button
                  type="button"
                  onClick={() => {
                    if (tshirt) {
                      if (inWishlist) {
                        // Remove from wishlist logic would go here
                        setInWishlist(false);
                      } else {
                        addToWishlist(tshirt as any);
                        setInWishlist(true);
                      }
                    }
                  }}
                  className="flex items-center justify-center w-full px-6 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  <Heart
                    className={`w-5 h-5 mr-2 ${
                      inWishlist ? 'text-red-500 fill-current' : 'text-gray-400'
                    }`}
                  />
                  {inWishlist ? 'Remove from Wishlist' : 'Add to Wishlist'}
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Product Gallery Section */}
        {tshirtOption?.gallery_images && tshirtOption.gallery_images.length > 0 && (
          <div className="mt-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Gallery</h2>
            <div className="bg-white rounded-lg shadow-sm overflow-hidden p-4">
              <GallerySlideshow 
                images={tshirtOption.gallery_images} 
                productName={tshirt.option_name} 
              />
            </div>
          </div>
        )}
        
        {/* Product Details Section */}
        {tshirtOption?.details && (
          <div className="mt-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Product Details</h2>
            <div className="bg-white rounded-lg shadow-sm overflow-hidden p-6">
              <div className="prose max-w-none">
                {tshirtOption.details}
              </div>
            </div>
          </div>
        )}
        
        {/* Shipping & Returns */}
        <div className="mt-12">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Shipping & Returns</h2>
          <div className="bg-white rounded-lg shadow-sm overflow-hidden">
            <div className="p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-2">Shipping</h3>
              <p className="text-gray-600 mb-4">
                Free shipping on all orders over $50. Orders are processed within 1-2 business days and delivered within 3-5 business days.
              </p>
              
              <h3 className="text-lg font-medium text-gray-900 mb-2 mt-6">Returns</h3>
              <p className="text-gray-600">
                We offer a 30-day return policy. Items must be in original condition with tags attached. 
                Please contact our customer service team to initiate a return.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TShirtDetailPage;
